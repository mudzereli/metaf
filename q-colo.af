~~ {
~~ FOR AUTO-COMPLETION ASSISTANCE: testvar getvar setvar touchvar clearallvars clearvar getcharintprop getchardoubleprop getcharquadprop getcharboolprop getcharstringprop getisspellknown getcancastspell_hunt getcancastspell_buff getcharvital_base getcharvital_current getcharvital_buffedmax getcharskill_traininglevel getcharskill_base getcharskill_buffed getplayerlandcell getplayercoordinates coordinategetns coordinategetwe coordinategetz coordinatetostring coordinateparse coordinatedistancewithz coordinatedistanceflat wobjectgetphysicscoordinates wobjectgetname wobjectgetobjectclass wobjectgettemplatetype wobjectgetisdooropen wobjectfindnearestmonster wobjectfindnearestdoor wobjectfindnearestbyobjectclass wobjectfindininventorybytemplatetype wobjectfindininventorybyname wobjectfindininventorybynamerx wobjectgetselection wobjectgetplayer wobjectfindnearestbynameandobjectclass actiontryselect actiontryuseitem actiontryapplyitem actiontrygiveitem actiontryequipanywand actiontrycastbyid actiontrycastbyidontarget chatbox chatboxpaste statushud statushudcolored uigetcontrol uisetlabel isfalse istrue iif randint cstr strlen getobjectinternaltype cstrf stopwatchcreate stopwatchstart stopwatchstop stopwatchelapsedseconds cnumber floor ceiling round abs getworldname getitemcountininventorybyname getheading getitemcountininventorybynamerx getheadingto actiontrygiveprofile vitae getfellowshipstatus getfellowshipname getfellowshipisopen getfellowshipisleader getfellowshipleaderid getfellowshipcanrecruit getfellowid getfellowshipcount getfellowshiplocked getfellowname getfellowshipisfull sin cos tan sqrt asin acos atan atan2 sinh cosh tanh vtsetmetastate getregexmatch echo chr ord wobjectgetid wobjectgethealth wobjectfindbyid wobjectgetintprop wobjectfindnearestbytemplatetype wobjectgetopencontainer testquestflag getquestktprogress isrefreshingquests getquestktrequired getqueststatus getisday getgamehour getgamehourname getisnight getgameday getgameticks getminutesuntilday getgamemonth getgamemonthname getminutesuntilnight getgameyear uisetvisible uiviewvisible uiviewexists getgvar touchgvar getpvar touchpvar setgvar cleargvar setpvar clearpvar testgvar clearallgvars testpvar clearallpvars dictgetitem dictcreate dicthaskey dictadditem dictkeys dictremovekey dictvalues dictclear dictsize dictcopy listgetitem listpop listcreate listcontains listremove listadd listindexof listremoveat listinsert listlastindexof listclear listcopy listcount listreverse

~~																						
~~ File auto-generated by metaf, a program created by Eskarina of Morningthaw/Coldeve.	
~~		Get metaf here: https://github.com/JJEII/metaf/									
~~																						
~~ All recognized structural designators:												
~~		STATE:				DO:															
~~		IF:					NAV:														
~~																						
~~ All recognized CONDITION (IF:) operation keywords:									
~~		Never				NavEmpty			MobsInDist_Priority		Not				
~~		Always				Death				NeedToBuff				PSecsInStateGE	
~~		All					VendorOpen			NoMobsInDist			SecsOnSpellGE	
~~		Any					VendorClosed		BlockE					BuPercentGE		
~~		ChatMatch			ItemCountLE			CellE					DistToRteGE		
~~		MainSlotsLE			ItemCountGE			IntoPortal				Expr			
~~		SecsInStateGE		MobsInDist_Name		ExitPortal				ChatCapture		
~~																						
~~ All recognized ACTION (DO:) operation keywords:										
~~		None				EmbedNav			ChatExpr				SetOpt			
~~		SetState			CallState			SetWatchdog				CreateView		
~~		Chat				Return				ClearWatchdog			DestroyView		
~~		DoAll				DoExpr				GetOpt					DestroyAllViews	
~~																						
~~ All recognized NAV types:															
~~		circular			follow														
~~		linear				once														
~~																						
~~ All recognized NAV NODE types:														
~~		flw					vnd															
~~		pnt					ptl															
~~		rcl					tlk															
~~		pau					chk															
~~		cht					jmp															
~~		prt (deprecated in VTank)														
~~ }

STATE: {Default} ~~ {
	IF:	Always
		DO:	SetState {*SetupOptions*}
~~ }
STATE: {*SetupOptions*} ~~ {
	IF:	Always
		DO:	DoAll
				EmbedNav navNone {None}
				SetOpt {AttackDistance} {0.3}
				SetOpt {ApproachDistance} {0.021}
				SetOpt {NavCloseStopRange} {0.021}
				SetOpt {EnableCombat} {false}
				SetOpt {PetRangeMode} {0}
				SetOpt {EnableNav} {true}
				SetOpt {LootFellowCorpses} {false}
				SetOpt {EnableBuffing} {false}
				DoExpr {setgvar[qcolo-looping,0]}
				DoExpr {setgvar[qcolo-numchars,0]}
				DoExpr {setgvar[qcolo-numcharsbuffed,0]}
				DoExpr {setgvar[qcolo-numcharswaiting,0]}
				DoExpr {setgvar[qcolo-numcharsreadyforturnin,0]}
				DoExpr {setgvar[qcolo-fellowlocked,0]}
				~~DoExpr {setvar[qcolo-started,0]}
	IF:	All
			SecsInStateGE 3
			Expr {getfellowshipcount[]>=3}
		DO:	DoAll
				DoExpr {setgvar[qcolo-numchars,getgvar[qcolo-numchars]+1]}
				SetState {ProgressCheck}
~~ }
STATE: {ProgressCheck} ~~ {
	IF:	Expr {wobjectfindnearestbynameandobjectclass[37,Arena Bell] && coordinatedistancewithz[getplayercoordinates[], wobjectgetphysicscoordinates[wobjectfindnearestbynameandobjectclass[37,Arena Bell]]] <= 25}
		DO:	SetState {StartCurrentRoom}
	IF:	BlockE 00AF0000
		DO:	SetState {WaitingForStart}
	IF:	Always
		DO:	SetState {GoToColo}
~~ }
STATE: {GoToColo} ~~ {
	~~ we're here so stop casting
	IF:	BlockE 00AF0000
		DO:	SetState {ProgressCheck}
	~~ just keep trying to spam the spell over and over again
	~~ Colosseum Recall Spell ID = 4213
	IF:	Expr {actiontrycastbyid[4213]}
		DO: SetState {GoToColo}
~~ }
STATE: {WaitingForStart} ~~ {
	~~ this sets up all the initial variables when waiting to start
	IF:	Always
		DO:	DoAll
				SetOpt {EnableCombat} {false}
				SetOpt {EnableBuffing} {false}
				SetOpt {EnableLooting} {false}
				SetOpt {AttackDistance} {0.02}
				SetOpt {ApproachDistance} {0}
				SetOpt {NavCloseStopRange} {0.008333}
				SetOpt {PetRangeMode} {1}
				EmbedNav navTalkMasterArbitrator {TalkMasterArbitrator}
				DoExpr {setgvar[qcolo-numcharswaiting,getgvar[qcolo-numcharswaiting]+1]}
	~~ this condition puts you back into the arena if you reload the script after leaving
	IF:	ChatMatch {Master Arbitrator tells you\, \"Your fellowship\'s Arena battles still continue. }
		DO:	DoAll
				DoExpr {setvar[qcolo-started,1]}
				SetState {EnterFirstRoom}
	~~ this condition will automatically start the next run if qcolo-looping is set to 1
	IF:	All
			ItemCountGE 1 {Colosseum Ticket}
			Expr {getgvar[qcolo-looping]==1}
			Expr {getgvar[qcolo-numcharswaiting]>=getgvar[qcolo-numchars]}
			SecsInStateGE 90
		DO:	SetState {GettingATicket}
	~~ this condition triggers when the ticket holder receives a ticket stub
	IF:	Any
			Expr {getgvar[qcolo-fellowlocked]==1}
			ChatMatch {\[Fellowship\].* says\, \"Received a Colosseum Ticket Stub\. Enter the first room and start buffing\!"}
		DO:	SetState {EnterFirstRoom}
	~~ this condition is used to manually start the script [!startl in fellow] (with looping)
	IF:	ChatMatch {\[Fellowship\] You say\, \"\!startl\"}
		DO:	DoAll
				DoExpr {setgvar[qcolo-looping,1]}
				SetState {GettingATicket}
	~~ this condition is used to manually start the script [!start in fellow] (without looping)
	IF:	ChatMatch {\[Fellowship\] You say\, \"\!start\"}
		DO:	SetState {GettingATicket}
~~ }
STATE: {GettingATicket} ~~ {
	~~ if we get a ticket stub, start buffing and notify clients that it was received
	IF:	ItemCountGE 1 {Colosseum Ticket Stub}
		DO:	DoAll
				DoExpr {setgvar[qcolo-fellowlocked,1]}
				Chat {/f Received a Colosseum Ticket Stub. Enter the first room and start buffing!}
				SetState {EnterFirstRoom}
	~~ if we have a ticket but no stub, try to get a ticket
	IF:	All
			ItemCountGE 1 {Colosseum Ticket}
			Not ItemCountGE 1 {Colosseum Ticket Stub}
		DO:	Chat {/ub give Colosseum Ticket to Master Arbitrator}
	~~ if we're out of tickets, we're all done
	IF:	ItemCountLE 0 {Colosseum Ticket}
		DO:	SetState {AllDone}
	~~ keep trying to get a ticket until an arena frees up
	IF:	Any
			SecsInStateGE 10
			ChatMatch {^Master Arbitrator says\, \"Arena .* is now available for new warriors\!\"}
		DO:	SetState {GettingATicket}
~~ }
STATE: {EnterFirstRoom} ~~ {
	~~ first lets go into the arena, so that we can start our timer
	IF:	NavEmpty
		DO: DoAll
				DoExpr {setvar[qcolo-started,1]}
				Chat {/ub usel Advanced Colosseum Arena}
				SetWatchdog 3 3 {EnterFirstRoom}
	~~ ok we zoned into the arena, and we're actually going to start buffing
	IF:	Any
			IntoPortal
			ExitPortal
		DO:	SetState {BuffingBeforeRun}
~~ }
STATE: {BuffingBeforeRun} ~~ {
	~~ first lets go into the arena, so that we can start our timer
	IF:	Always
		DO:	DoAll
				Chat {/vt forcebuff}
				SetOpt {EnableBuffing} {true}
	~~ if we've been buffing for 3 minutes, or we finished by casting Blackmoor's Favor, then we're good to go.. probably
	IF:	Any
			SecsInStateGE 180
			ChatMatch {^You cast Blackmoor.*s Favor on yourself}
		DO:	DoExpr {setgvar[qcolo-numcharsbuffed,getgvar[qcolo-numcharsbuffed]+1]}
	~~ if everyones probably good to go.. then lets go
	IF:	Expr {getgvar[qcolo-numcharsbuffed]>=getgvar[qcolo-numcharswaiting]}
		DO:	SetState {StartFirstRoom}
~~ }
STATE: {StartFirstRoom} ~~ {
	~~ do this special setup for starting the first room
	IF:	Always
		DO:	DoAll
				SetOpt {AttackDistance} {0.3}
				SetOpt {EnableCombat} {true}
				SetOpt {NavCloseStopRange} {0.02}
				SetOpt {ApproachDistance} {0.02}
				Chat {/myquests}
				SetState {StartCurrentRoom}
~~ }
STATE: {StartCurrentRoom} ~~ {
	~~ if we try to start the room, but we finished the run, then wait for our timer
	IF:	Any
			CellE 00AF0118
			CellE 00AF0117
		DO:	DoAll
				SetState {WaitingForRewards}
	~~ ring the bell, start killing & looting
	IF:	Always
		DO:	DoAll
				SetOpt {EnableCombat} {true}
				SetOpt {EnableLooting} {true}
				SetOpt {AttackDistance} {0.3}
				Chat {/ub usel Arena Bell}
				SetState {KillingCurrentRoom}
~~ }
STATE: {KillingCurrentRoom} ~~ {
	IF:	Any
			ChatMatch {A Door appears on the North wall.}
			ChatMatch {Congratulations! You have beaten the Colosseum!}
			Expr {wobjectfindnearestbyobjectclass[14]&&coordinatedistancewithz[getplayercoordinates[], wobjectgetphysicscoordinates[wobjectfindnearestbyobjectclass[14]]]<=29}
		DO:	DoAll
				DoExpr {setvar[qcolo-started,1]}
				SetState {MoveToNextRoom}
~~ }
STATE: {MoveToNextRoom} ~~ {
	~~ once we enter the portal, don't try to use it anymore
	IF:	IntoPortal
		DO:	SetState {MoveToNextRoomInPortal}
	~~ turn off looting and use the nearest portal.. over and over until it works
	IF:	Always
		DO:	DoAll
				SetOpt {enablelooting} {false}
				DoExpr {actiontryuseitem[wobjectfindnearestbyobjectclass[14]]}
				SetWatchdog 2 2 {MoveToNextRoom}
~~ }
STATE: {MoveToNextRoomInPortal} ~~ {
	~~ this is only to keep us from doing stuff while we're in the portal
	IF:	ExitPortal
		DO:	SetState {StartCurrentRoom}
~~ }
STATE: {WaitingForRewards} ~~ {
	~~ if we started colo and we're at this step, then lets see if we're ready for turn in
	IF:	Always
		DO:	Chat {/myquests}
	~~ keep checking every 30 seconds
	IF:	SecsInStateGE 30
		DO:	SetState {WaitingForRewards}
	~~ if all our flags are good, we can finally turn in!
	IF:	All
			Not Expr {isrefreshingquests[]}
			Expr {getqueststatus[coloarenaoneaccess]}
			Expr {getqueststatus[coloarenatwoaccess]}
			Expr {getqueststatus[coloarenathreeaccess]}
			Expr {getqueststatus[coloarenafouraccess]}
			Expr {getqueststatus[coloarenafiveaccess]}
		DO:	SetState {ReadyToTurnInRewards}
~~ }
STATE: {ReadyToTurnInRewards} ~~ {
	IF:	Always
		DO:	DoExpr {setgvar[qcolo-numcharsreadyforturnin,getgvar[qcolo-numcharsreadyforturnin]+1]}
	IF:	Expr {getgvar[qcolo-numcharsreadyforturnin]>=getgvar[qcolo-numchars]}
		DO:	SetState {TurnInRewards}
~~ }
STATE: {TurnInRewards} ~~ {
	~~ this actually gets us the reward
	IF:	Always
		DO:	DoAll
				DoExpr {setgvar[qcolo-numcharsbuffed,0]}
				DoExpr {setgvar[qcolo-numcharswaiting,0]}
				DoExpr {setgvar[qcolo-numcharsreadyforturnin,0]}
				DoExpr {setgvar[qcolo-fellowlocked,0]}
				DoExpr {setvar[qcolo-started,0]}
				EmbedNav navTalkMasterArbitrator {TalkMasterArbitrator}
	~~ once we get our rewards, go figure out what to do
	IF:	ChatMatch {You\'ve earned .* experience\.}
		DO:	SetState {ProgressCheck}
	~~ if we think we're done but we're not, well keep on going.
	IF:	ChatMatch {Master Arbitrator tells you\, \"Your fellowship\'s Arena battles still continue. }
		DO:	SetState {EnterFirstRoom}
	~~ if we thought we did colo, but we actually didnt.. time for a fresh start
	IF:	ChatMatch {Master Arbitrator tells you\, \"If you wish to fight as a gladiator in the Arena}
		DO:	SetState {WaitingForStart}
~~ }

~~========================= ONLY NAVS APPEAR BELOW THIS LINE =========================~~

NAV: navNone once ~~ {
~~ }
NAV: navTalkMasterArbitrator once ~~ {
	pnt -101.783239634832 38.0445641900102 2.08333134651184E-05
	tlk -101.783916680018 37.9945620814959 2.08333134651184E-05 -101.783333333333 38.05 3.12502197630238E-05 37 {Master Arbitrator}
~~ }
